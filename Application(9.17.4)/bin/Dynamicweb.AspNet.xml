<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dynamicweb.AspNet</name>
    </assembly>
    <members>
        <member name="T:Dynamicweb.AspNet.Controllers.SessionControllerHandler">
            <summary>
            Defines a HttpControllerHandler instance that supports Session State by implementing IRequiresSessionState
            </summary>
        </member>
        <member name="M:Dynamicweb.AspNet.Controllers.SessionControllerHandler.#ctor(System.Web.Routing.RouteData)">
            <summary>
            Creates a new instance of ControllerHandler with RouteData
            </summary>
            <param name="routeData"></param>
        </member>
        <member name="T:Dynamicweb.AspNet.Controllers.SessionRouteHandler">
            <summary>
            Handles route delegation
            </summary>
        </member>
        <member name="M:Dynamicweb.AspNet.Controllers.SessionRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Returns a HttpHandler
            </summary>
            <param name="requestContext">The Request Context</param>
            <returns>An IHttpHandler</returns>
        </member>
        <member name="T:Dynamicweb.AspNet.DynamicwebHttpHandler">
            <summary>
            DynamicwebHttpHandler is the http handler that executes all frontend page views in Dynamicweb.
            </summary>
            <seealso cref="T:System.Web.IHttpHandler" />
            <seealso cref="!:SessionState.IRequiresSessionState" />
        </member>
        <member name="P:Dynamicweb.AspNet.DynamicwebHttpHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
            <value><c>true</c> if this instance is reusable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Dynamicweb.AspNet.DynamicwebHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="T:Dynamicweb.AspNet.Notifications.FirstRequestInitialization">
            <summary>
            The FirstRequestInitialization class ensures that all needed services and application wide settings is initialized 
            </summary>
        </member>
        <member name="F:Dynamicweb.AspNet.Notifications.FirstRequestInitialization._initializedAlready">
            <summary>
            Indicates if the systems has been intialized
            </summary>
        </member>
        <member name="F:Dynamicweb.AspNet.Notifications.FirstRequestInitialization.Lock">
            <summary>
            Sync lock ensuring that only one thread will initialize the environment dependent services
            </summary>
        </member>
        <member name="M:Dynamicweb.AspNet.Notifications.FirstRequestInitialization.Initialize">
            <summary>
            Initializes any Application Dependent Services
            </summary>
        </member>
        <member name="M:Dynamicweb.AspNet.Notifications.FirstRequestInitialization.InitializeMvc">
            <summary>
            Initializes any MVC dependent functionality
            </summary>
        </member>
        <member name="T:Dynamicweb.AspNet.Notifications.DynamicwebRouteHandler">
            <summary>
            DynamicwebRouteHandler handles routing of requests to Default.aspx and returns a <see cref="T:Dynamicweb.AspNet.DynamicwebHttpHandler"></see>.
            </summary>
            <seealso cref="T:System.Web.Routing.IRouteHandler" />
        </member>
        <member name="M:Dynamicweb.AspNet.Notifications.DynamicwebRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>An object that processes the request.</returns>
        </member>
        <member name="T:Dynamicweb.AspNet.OwinStartup">
            <summary>
            This class is used for Owin context automatic startup.
            It is called at Application Startup.
            </summary>
        </member>
        <member name="M:Dynamicweb.AspNet.Views.ElementView.CreateErrorLookupFunction(System.Web.Mvc.ModelStateDictionary)">
            <summary>
            Creates the error lookup function, that can be used to find all registered errors for a specific modelstate.
            </summary>
            <param name="modelStateDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.AspNet.Views.ElementView.TransformModelErrors(System.Web.Mvc.ModelErrorCollection)">
            <summary>
            Transforms the ModelErrorCollection to a non-mvc model.
            </summary>
            <param name="modelErrors">The model errors.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.AspNet.Views.ElementView.TransformModelMetadata(System.Web.Mvc.ModelMetadata)">
            <summary>
            The purpose of this method is to extract the strings/info we need from ModelMetadata and pass them on to a lower level, where system.web is not allowed.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamicweb.AspNet.Views.ElementView.TransformModelMetadata(System.Web.Mvc.ModelMetadata,System.Collections.Generic.Dictionary{System.String,Dynamicweb.UI.Elements.CustomModelMetadata})">
            <summary>
            The purpose of this method is to extract the strings/info we need from ModelMetadata and pass them on to a lower level, where system.web is not allowed.
            </summary>
            <param name="modelMetadata">The model metadata.</param>
            <returns></returns>
        </member>
        <member name="T:Dynamicweb.AspNet.Views.ElementViewEngine">
            <summary>
            View Search Order
            </summary>
        </member>
        <member name="T:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider">
            <summary>
            Provides 
            </summary>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.Version">
            <summary>
            Gets the IIS version.
            </summary>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.Name">
            <summary>
            Gets the app pool name.
            </summary>
            <value>The app pool name.</value>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.IsIntegrated">
            <summary>
            Gets a value indicating whether the current application pool (IIS 7 or 8) is running in integrated pipeline.
            </summary>
            <value>
            <c>true</c> if application pool is running in integrated; otherwise, <c>false</c>.
            </value>
            <remarks>Always returns false on IIS 6</remarks>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.SiteName">
            <summary>
            Gets the name of the IIS instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.SiteID">
            <summary>
            Gets the id of the IIS instance.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.AdminDirectory">
            <summary>
            Gets the admin directory.
            </summary>
            <value>The admin directory.</value>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.HomeDirectory">
            <summary>
            Gets the home directory.
            </summary>
            <value>The home directory.</value>
        </member>
        <member name="P:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.MissingPageHandler">
            <summary>
            Gets the handler404.
            </summary>
            <value>The handler404.</value>
        </member>
        <member name="M:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.UpdateStorageLocation(System.String,System.String)">
            <summary>
            Updates the bin.
            </summary>
            <param name="original">The bin location.</param>
            <param name="target">The update to bin location.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.SetHome(System.String)">
            <summary>
            Changes home virtual directory
            </summary>
            <param name="path">virtual directory physical path</param>
            <returns>True if operation succeeded</returns>
        </member>
        <member name="M:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.SetAdmin(System.String)">
            <summary>
            Sets admin directory path
            </summary>
            <param name="path">Path of directory containing admin folder</param>
            <returns>True if operation succeeded</returns>
        </member>
        <member name="M:Dynamicweb.Hosting.DotNetFrameworkHostingEnvironmentProvider.SetFiles(System.String)">
            <summary>
            Sets files directory path
            </summary>
            <param name="path">Path of directory containing files folder</param>
            <returns>True if operation succeeded</returns>
        </member>
        <member name="T:Dynamicweb.Hosting.IisHostingServerProvider">
            <summary>
            Provides access to IIS information and manipulation.
            </summary>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.GetSiteID">
            <summary>
            Gets the ID of the site from the hostingenvironment.
            </summary>
            <returns>siteID</returns>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.GetSite(Microsoft.Web.Administration.ServerManager,System.String)">
            <summary>
            Gets the site by it's name.
            </summary>
            <param name="manager">serverManager</param>
            <param name="siteName">siteName</param>
            <returns>site</returns>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.GetHostHeaders(System.String)">
            <summary>
            Gets all host headers configured for specified web-site.
            </summary>
            <param name="websiteID">The ID of the website.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.AddHostHeader(Dynamicweb.Hosting.HostHeader)">
            <summary>
            Adds new host header to the current web-site.
            </summary>
            <param name="hostHeader">Host header to add.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.AddHostHeader(System.String)">
            <summary>
            Adds new host header to the current web-site.
            </summary>
            <param name="hostName">The host-name of the new host header.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.AddHostHeader(Dynamicweb.Hosting.HostHeader,System.String)">
            <summary>
            Adds new host header to specified web-site.
            </summary>
            <param name="hostHeader">Host header to add.</param>
            <param name="siteName">The web-site name.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.AddHostHeader(Dynamicweb.Hosting.HostHeader,Microsoft.Web.Administration.Site)">
            <summary>
            Adds new host header to specified web-site.
            </summary>
            <param name="hostHeader">Host header to add.</param>
            <param name="site">The web-site.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.RemoveHostHeader(System.String)">
            <summary>
            Removes specified host header from the current web-site.
            </summary>
            <param name="hostName">Host-name of the host header.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.RemoveHostHeader(Dynamicweb.Hosting.HostHeader,System.String)">
            <summary>
            Removes specified host header from specified web-site.
            </summary>
            <param name="hostHeader">Host header to remove.</param>
            <param name="siteName">The target web-site.</param>
        </member>
        <member name="M:Dynamicweb.Hosting.IisHostingServerProvider.RemoveHostHeader(Dynamicweb.Hosting.HostHeader,Microsoft.Web.Administration.Site)">
            <summary>
            Removes specified host header from specified web-site.
            </summary>
            <param name="hostHeader">Host header to remove.</param>
            <param name="site">The target web-site.</param>
        </member>
    </members>
</doc>
